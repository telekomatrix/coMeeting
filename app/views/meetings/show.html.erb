<div>
  <% if @participation.is_admin %>
    
    <div>
      <%= link_to image_tag("/assets/icons/application_edit.png", :alt => "")+ " " + t("meeting.actions.edit.label"), edit_meeting_path(@participation.link) %>
      <%= link_to image_tag("/assets/icons/cross.png", :alt => "") + " " + t("meeting.actions.delete.label"), meeting_path(@participation.link), :confirm => t("meeting.actions.delete.confirm"), :method => :delete %>
    </div>
      
  <% else %>

    <div>
      <% if @participation.is_attending == 0 %>       <%# User still has not decided %>
      
        <%= link_to image_tag("/assets/icons/tick.png", :alt => "")+ " " + t("meeting.views.show.text.attending.confirm"), confirm_participation_path(@participation.link) %>

        <%= link_to image_tag("/assets/icons/cross.png", :alt => "")+ " " + t("meeting.views.show.text.attending.decline"), decline_participation_path(@participation.link) %>

      <% elsif @participation.is_attending == 1 %>    <%# User is attending %>

        <span><%= t("meeting.views.show.text.attending.confirmed") %></span>

        <%= link_to image_tag("/assets/icons/cross.png", :alt => "")+ " " + t("meeting.views.show.text.attending.decline"), decline_participation_path(@participation.link) %>

      <% else %>                                      <%# User is not attending %>

        <%= link_to image_tag("/assets/icons/tick.png", :alt => "")+ " " + t("meeting.views.show.text.attending.confirm"), confirm_participation_path(@participation.link) %>

        <span><%= t("meeting.views.show.text.attending.declined") %></span>
          
      <% end %>
    </div>

  <% end %>
</div>


<div>
  <p>
    <b><%= t("meeting.views.show.text.created_by") %>:</b><%= @meeting.creator.get_name_and_email %>
  </p>
  <p>
    <b><%= t("activerecord.attributes.meeting.subject") %>:</b><%= @meeting.subject %>
  </p>

  <p>
    <b><%= t("activerecord.attributes.meeting.location") %>:</b><%= @meeting.location %>
  </p>

  <p>
    <b><%= t("activerecord.attributes.meeting.date") %>:</b><%= @meeting.date.strftime("%d/%m/%Y") %>
  </p>

  <p>
    <b><%= t("activerecord.attributes.meeting.time") %>:</b><%= @meeting.time.strftime("%1Hh:%Mm") %> <%= @meeting.time_zone %>
  </p>

  <p>
    <b><%= t("activerecord.attributes.meeting.duration") %>:</b><%= @meeting.duration.strftime("%1Hh:%Mm") %>
  </p>

  <% unless @meeting.extra_info.blank? %>
    <p>
      <b><%= t("activerecord.attributes.meeting.extra_info") %>:</b><%= @meeting.extra_info %>
    </p>
  <% end %>
</div>

<% unless @meeting.topics.blank? %>
  <p>
    <%= t("activerecord.attributes.meeting.topics") %>
  </p>
  <div>
    <table>
      <% @meeting.topics.each do |topic| %>
          <tr class="<%= cycle("odd", "even") %>">
            <td>
              <%= topic %>
            </td>
          </tr>
      <% end %>
    </table>
  </div>
<% end %>



<% if @participation.is_attending != 0 %>
  <div id="partialstatic_minutes">
    <%= render :partial => 'static_minutes' %>
  </div>
  <div id="partialminutes">
    <%= render :partial => 'minutes' %>
  </div>

  <div>
    <%= link_to image_tag("/assets/icons/application_edit.png", :alt => "")+ " " + t("meeting.pdf"), download_pdf_path(@participation.link) %>
  </div>
<% end %>

<%= hidden_field_tag :token, @participation.link %>

<script>
  function updateMinutes(meeting_id) {
    $.ajax({
      type    : "POST",
      url     : "/meetings/update_minutes",
      data    : { authenticity_token: $('meta[name="csrf-token"]').attr('content'), id: meeting_id, minutes: $('#minutes').val() },
    });
  }

  function getMinutes(meeting_id) {
    $.ajax({
      type    : "GET",
      url     : "/meetings/get_minutes",
      data    : { id: meeting_id },
    });
  }


  // idle.js (c) Alexios Chouchoulas 2009
  // Released under the terms of the GNU Public License version 2.0 (or later).
    
  var _idleTimeout = 5000;  // 5 seconds
   
  var _idleNow = false;
  var _idleTimestamp = null;
  var _idleTimer = null;
   
  function setIdleTimeout(ms){
      _idleTimeout = ms;
      _idleTimestamp = new Date().getTime() + ms;
      if (_idleTimer != null) {
      clearTimeout (_idleTimer);
      }
      _idleTimer = setTimeout(_makeIdle, ms + 50);
  };
   
  function _makeIdle(){
      var t = new Date().getTime();
      if (t < _idleTimestamp) {
      _idleTimer = setTimeout(_makeIdle, _idleTimestamp - t + 50);
      return;
      }
      _idleNow = true;
    updateMinutes($("input#token").val());
  };
   
  function _active(event){
      var t = new Date().getTime();
      _idleTimestamp = t + _idleTimeout;
   
    if(_idleNow){
      setIdleTimeout(_idleTimeout);
    }
   
      _idleNow = false;
  };
   
  function _initMinutesListener(){
      var doc = $(document);
      doc.ready(function(){
          try {
              doc.keydown(_active);
          } catch (err) { }
      });
  };

  <% if @participation.is_creator %>
    _initMinutesListener();
  <% else %>
    setInterval("getMinutes('<%= @participation.link %>')", 5000);
  <% end %>
</script>